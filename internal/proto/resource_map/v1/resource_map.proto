syntax = "proto3";

package internal.proto.resource_map.v1;

import "internal/proto/logs/v1/logs.proto";

service ResourceMapService {
  rpc TryInitResource(TryInitResourceRequest) returns (TryInitResourceResponse);
  rpc CompleteInitResource(CompleteInitResourceRequest) returns (CompleteInitResourceResponse);
  rpc FailInitResource(FailInitResourceRequest) returns (FailInitResourceResponse);
  rpc Acquire(AcquireRequest) returns (AcquireResponse);
  rpc AcquireMulti(AcquireMultiRequest) returns (AcquireMultiResponse);
  rpc Release(ReleaseRequest) returns (ReleaseResponse);
  rpc ReleaseMulti(ReleaseMultiRequest) returns (ReleaseMultiResponse);
}

message TryInitResourceRequest {
  reserved 2;
  string resource_name = 1;
  repeated logs.v1.Caller context = 3;
}

message TryInitResourceResponse {
  bool should_try = 1;
}

message CompleteInitResourceRequest {
  reserved 2;
  string resource_name = 1;
  repeated logs.v1.Caller context = 3;
}

message CompleteInitResourceResponse {}

message FailInitResourceRequest {
  reserved 2;
  string resource_name = 1;
  repeated logs.v1.Caller context = 3;
}

message FailInitResourceResponse {}

message AcquireRequest {
  reserved 2;
  string resource_name = 1;
  repeated logs.v1.Caller context = 5;
  int64 max_parallelism = 3;
  bool exclusive = 4;
}

message AcquireResponse {}

message AcquireMultiEntry {
  string resource_name = 1;
  repeated logs.v1.Caller context = 2;
  int64 max_parallelism = 3;
  bool exclusive = 4;
}

message AcquireMultiRequest {
  repeated AcquireMultiEntry resources = 1;
}

message AcquireMultiResponse {}

message ReleaseRequest {
  reserved 2;
  string resource_name = 1;
  repeated logs.v1.Caller context = 3;
}

message ReleaseResponse {}

message ReleaseMultiEntry {
  string resource_name = 1;
  repeated logs.v1.Caller context = 2;
}

message ReleaseMultiRequest {
  repeated ReleaseMultiEntry resources = 1;
}

message ReleaseMultiResponse {}
