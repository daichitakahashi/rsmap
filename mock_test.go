// Code generated by MockGen. DO NOT EDIT.
// Source: ./log.go

// Package rsmap is a generated GoMock package.
package rsmap

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockkeyValueStore is a mock of keyValueStore interface.
type MockkeyValueStore[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockkeyValueStoreMockRecorder[T]
}

// MockkeyValueStoreMockRecorder is the mock recorder for MockkeyValueStore.
type MockkeyValueStoreMockRecorder[T any] struct {
	mock *MockkeyValueStore[T]
}

// NewMockkeyValueStore creates a new mock instance.
func NewMockkeyValueStore[T any](ctrl *gomock.Controller) *MockkeyValueStore[T] {
	mock := &MockkeyValueStore[T]{ctrl: ctrl}
	mock.recorder = &MockkeyValueStoreMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkeyValueStore[T]) EXPECT() *MockkeyValueStoreMockRecorder[T] {
	return m.recorder
}

// forEach mocks base method.
func (m *MockkeyValueStore[T]) forEach(fn func(string, *T) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "forEach", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// forEach indicates an expected call of forEach.
func (mr *MockkeyValueStoreMockRecorder[T]) forEach(fn interface{}) *keyValueStoreforEachCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "forEach", reflect.TypeOf((*MockkeyValueStore[T])(nil).forEach), fn)
	return &keyValueStoreforEachCall[T]{Call: call}
}

// keyValueStoreforEachCall wrap *gomock.Call
type keyValueStoreforEachCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *keyValueStoreforEachCall[T]) Return(arg0 error) *keyValueStoreforEachCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *keyValueStoreforEachCall[T]) Do(f func(func(string, *T) error) error) *keyValueStoreforEachCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *keyValueStoreforEachCall[T]) DoAndReturn(f func(func(string, *T) error) error) *keyValueStoreforEachCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// get mocks base method.
func (m *MockkeyValueStore[T]) get(name string) (*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "get", name)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// get indicates an expected call of get.
func (mr *MockkeyValueStoreMockRecorder[T]) get(name interface{}) *keyValueStoregetCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "get", reflect.TypeOf((*MockkeyValueStore[T])(nil).get), name)
	return &keyValueStoregetCall[T]{Call: call}
}

// keyValueStoregetCall wrap *gomock.Call
type keyValueStoregetCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *keyValueStoregetCall[T]) Return(arg0 *T, arg1 error) *keyValueStoregetCall[T] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *keyValueStoregetCall[T]) Do(f func(string) (*T, error)) *keyValueStoregetCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *keyValueStoregetCall[T]) DoAndReturn(f func(string) (*T, error)) *keyValueStoregetCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// set mocks base method.
func (m *MockkeyValueStore[T]) set(name string, obj *T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "set", name, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// set indicates an expected call of set.
func (mr *MockkeyValueStoreMockRecorder[T]) set(name, obj interface{}) *keyValueStoresetCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "set", reflect.TypeOf((*MockkeyValueStore[T])(nil).set), name, obj)
	return &keyValueStoresetCall[T]{Call: call}
}

// keyValueStoresetCall wrap *gomock.Call
type keyValueStoresetCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *keyValueStoresetCall[T]) Return(arg0 error) *keyValueStoresetCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *keyValueStoresetCall[T]) Do(f func(string, *T) error) *keyValueStoresetCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *keyValueStoresetCall[T]) DoAndReturn(f func(string, *T) error) *keyValueStoresetCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
